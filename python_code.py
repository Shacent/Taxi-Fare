# -*- coding: utf-8 -*-
"""Submission Regresi Notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/195aTS59oQSdW_xM1HMgvlQe135eaoSLy

# Identity

- Nama   : Muhammad Hauzan Dini Fakhri
- Email  : hauzandini5@gmail.com
- Title  : Submission Dicoding - Taxi Price Prediction With Linear Regression

# Business Understanding

## **Prediksi Tarif Taksi Menggunakan Model Regresi**

### **1. Latar Belakang**
Industri transportasi berbasis taksi sangat bergantung pada sistem penentuan tarif yang akurat dan transparan. Tarif perjalanan biasanya ditentukan berdasarkan beberapa faktor seperti jarak tempuh, kondisi lalu lintas, jumlah penumpang, dan cuaca. Namun, fluktuasi dalam faktor-faktor ini sering kali menyebabkan ketidakpastian dalam estimasi tarif, yang dapat berdampak pada kepuasan pelanggan dan pendapatan pengemudi.

Dengan menerapkan model regresi, kita dapat mengembangkan sistem prediksi tarif yang lebih akurat berdasarkan data historis perjalanan. Model ini akan membantu penyedia layanan taksi dalam memberikan estimasi tarif yang lebih transparan, serta memungkinkan pengemudi dan pelanggan untuk mengantisipasi biaya perjalanan sebelum memulai perjalanan.

---

### **2. Tujuan Proyek**
Tujuan utama dari proyek ini adalah membangun model machine learning berbasis regresi untuk memprediksi tarif perjalanan taksi dengan mempertimbangkan berbagai faktor seperti jarak tempuh, waktu perjalanan, kondisi lalu lintas, jumlah penumpang, dan kondisi cuaca.

Dengan adanya model ini, diharapkan dapat:
- Meningkatkan akurasi estimasi tarif perjalanan.
- Meningkatkan transparansi dalam penentuan harga.
- Membantu pengemudi dalam mengoptimalkan strategi perjalanan.
- Memungkinkan pelanggan untuk mempersiapkan anggaran perjalanan dengan lebih baik.

---

### **3. Permasalahan Bisnis**
Dalam industri taksi, beberapa tantangan yang sering dihadapi terkait dengan tarif perjalanan antara lain:
1. **Estimasi Tarif yang Tidak Konsisten**: Pengguna sering kali tidak mendapatkan estimasi harga yang jelas sebelum perjalanan dimulai.
2. **Pengaruh Eksternal**: Tarif sering kali dipengaruhi oleh kondisi eksternal seperti lalu lintas dan cuaca, yang sulit diprediksi secara manual.
3. **Ketidakpastian bagi Pengemudi**: Pengemudi tidak selalu mengetahui apakah tarif yang dikenakan sudah optimal berdasarkan kondisi perjalanan saat itu.

Untuk mengatasi masalah ini, diperlukan model prediksi yang dapat mengestimasi tarif berdasarkan data historis dengan mempertimbangkan berbagai faktor penentu harga.

---

### **4. Pertanyaan Bisnis yang Akan Dijawab**
Dalam proyek ini, kita ingin menjawab beberapa pertanyaan penting:
- Seberapa besar pengaruh jarak tempuh terhadap tarif taksi?
- Bagaimana kondisi lalu lintas dan cuaca mempengaruhi harga perjalanan?
- Apakah ada pola tertentu dalam tarif berdasarkan waktu pengambilan dan pengantaran penumpang?

---

### **5. Tugas Machine Learning**
Proyek ini dikategorikan sebagai tugas **regresi** dalam machine learning karena target variabel yang ingin diprediksi adalah **Fare Amount (Tarif dalam USD)**, yang merupakan variabel kontinu.

Beberapa algoritma regresi yang dapat digunakan untuk membangun model meliputi:
- **Linear Regression**
- **Ridge Regression**
- **Lasso Regression**
- **Decision Tree**
- **Random Forest**
- **Gradient Boosting Regressor**
- **Support Vector Regressor**

Model terbaik akan ditentukan berdasarkan metrik evaluasi seperti **Mean Absolute Error (MAE)** dan **Root Mean Squared Error (RMSE)** untuk memastikan prediksi yang akurat dan dapat diterapkan dalam skenario nyata.

---

### **6. Kriteria Keberhasilan**
Keberhasilan proyek ini diukur berdasarkan beberapa faktor:
1. **Akurasi Model**: Model dapat memprediksi tarif perjalanan dengan error yang minimal.
2. **Dampak Bisnis**: Model dapat membantu meningkatkan transparansi dan efisiensi dalam sistem penentuan tarif taksi.
3. **Fleksibilitas dan Skalabilitas**: Model dapat diterapkan untuk berbagai kota atau wilayah dengan struktur tarif yang berbeda.

Dengan model ini, diharapkan bahwa industri transportasi berbasis taksi dapat meningkatkan efisiensi operasionalnya dan memberikan pengalaman pelanggan yang lebih baik.

---


### **7. Rubrik / Kriteria Penilaian**
Untuk mengevaluasi keberhasilan proyek ini, berikut adalah rubrik penilaiannya:

| Kriteria | Bobot | Deskripsi |
|----------|--------|-----------|
| **Pemahaman Data** | 20% | Kemampuan dalam melakukan eksplorasi data dan memahami distribusi data. |
| **Preprocessing Data** | 20% | Kualitas dalam membersihkan data, menangani missing values, feature engineering dan scaling data. |
| **Pemilihan Model** | 20% | Pemilihan algoritma regresi yang sesuai berdasarkan karakteristik dataset. |
| **Evaluasi Model** | 20% | Penggunaan metrik evaluasi seperti MAE dan RMSE untuk mengukur performa model. |
| **Kemudahan Penggunaan** | 20% | Model dapat digunakan secara praktis dengan input yang mudah dimasukkan oleh pengguna. |

Total nilai yang diperoleh akan menentukan tingkat keberhasilan proyek dalam menyelesaikan permasalahan bisnis yang telah didefinisikan.

</br>

> **Selanjutnya:** Saya mulai dengan eksplorasi data, preprocessing, dan membangun model regresi untuk memprediksi tarif taksi secara lebih akurat. ðŸš–ðŸ“Š

# Data Understanding

## Import Lib
"""

# Files Handler
import kagglehub
import shutil
import os
import joblib

# Data Handlers
import pandas as pd
import numpy as np

# Viz
import matplotlib.pyplot as plt
import seaborn as sns

# Warning
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

# Models
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge, Lasso, LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR

# Metrics
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""## Load Data"""

# Download latest version
path = kagglehub.dataset_download("denkuznetz/taxi-price-prediction")

# Define the target directory in Google Colab
target_directory = "/content"

# Move the downloaded dataset to the target directory
shutil.move(path, target_directory)

# Update the path to the new location
new_path = os.path.join(target_directory, os.path.basename(path))

print("Path to dataset files:", new_path)

price_df = pd.read_csv("/content/1/taxi_trip_pricing.csv")
price_df

"""## Dataframe Information"""

price_df.shape

price_df.info()

price_df.isna().sum()

# Clean the duplicated data
price_df = price_df.dropna()
price_df.isna().sum()

# Describe Data
price_df.describe(include="all")

price_df.duplicated().sum()

"""## EDA

### Memisahkan Tipe Data
"""

# Pisahkan kolom numerik dan kategorikal
numerical_columns = price_df.select_dtypes(include=['float64', 'int64']).columns
categorical_columns = price_df.select_dtypes(include=['object']).columns

"""### Distribusi Data

#### Numerical Plot
"""

# Plot histogram untuk seluruh kolom numerik
plt.figure(figsize=(15, 10))
for i, column in enumerate(numerical_columns, 1):
    plt.subplot(3, 3, i)  # Sesuaikan jumlah subplot berdasarkan jumlah kolom numerik
    sns.histplot(price_df[column], kde=True, bins=30)
    plt.title(f'Distribusi {column}')
    plt.xlabel(column)
    plt.ylabel('Frekuensi')
plt.tight_layout()
plt.show()

# Plot boxplot untuk setiap kolom numerik
plt.figure(figsize=(15, 10))
for i, column in enumerate(numerical_columns, 1):
    plt.subplot(3, 3, i)  # Sesuaikan jumlah subplot berdasarkan jumlah kolom numerik
    sns.boxplot(y=price_df[column])
    plt.title(column)
plt.tight_layout()
plt.show()

"""#### Categorical Plot"""

# Plot barplot untuk setiap kolom kategorikal terhadap Trip_Price
plt.figure(figsize=(15, 10))
for i, column in enumerate(categorical_columns, 1):
    plt.subplot(2, 2, i)  # Sesuaikan jumlah subplot berdasarkan jumlah kolom kategorikal
    sns.barplot(x=price_df[column], y=price_df['Trip_Price'], estimator='mean', ci=None)
    plt.title(f'Trip_Price by {column}')
    plt.xlabel(column)
    plt.ylabel('Average Trip_Price')
    plt.xticks(rotation=45)  # Rotasi label x jika diperlukan
plt.tight_layout()
plt.show()

"""Kesimpulan distribusi data ialah, data terdistribusi dengan cukup seimbang dimana:

- Data numerkal memiliki kelas yang seimbang, walaupun pada beberapa kasus terjadi perbedaan harga dan jarak yang ditempuh dari rata-rata kasus lainnya.

- Data kategorikal memiliki kelas yang seimbang, tidak ada perbedaan harga yang signifikan dari informasi yang diberikan pada dataset yang digunakan seperti:
   - Waktu (Pagi/Siang/Sore/Malam)
   - Minggu (Weekday / Weekend)
   - Kondisi Lalu Lintas (Padat/Sedang/Lancar)
   - Cuaca (Cerah/Hujan/Bersalju)

Sehingga butuh analisis korelasi untuk mencari penyebab bobot dari kolom yang menyebabkan dataset tersebut sedikit lebih mahal.

</br>

Hipotesa sementara:

Jaraklah yang mempengaruhi signifikan terhadap harga, dilihat pada visualisasi data numerikal bahwa beberapa kasus yang terjadi pada kenaikan harga berbading lurus dengan jarak tempuh.

### Korelasi Data

#### Encode Data Kategorikal

Dikarenakan terdapat data yang kategorikal, perlu tindakan One-Hot-Encoding untuk mengubah data pada kolom kategorikal
"""

encoded_df = pd.get_dummies(price_df, columns=categorical_columns, drop_first=True)
encoded_df.info()

"""#### Heatmap Correlation"""

# Buat heatmap
correlation_matrix = encoded_df.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Heatmap Korelasi Multivariat')
plt.show()

"""Yaps! Hipotesa saya betul, bahwa benar **faktor yang paling mempengaruhi harga adalah jarak yang ditempuh**

## Kesimpulan Dataset Information

- Dataset berjumlah 11 kolom dengan 1000 data
- Terdapat 50 data yang kosong
- Tipe data pada semua kolom merupakan data numerical
- Terdapat 7 kolom numerical dan 4 kolom object

## Jawaban Dari Pertanyaan Business

---

### Seberapa besar pengaruh jarak tempuh terhadap tarif taksi?
Pengaruh jarak tempuh terhadap tarif taksi sangat signifikan, dimana memiliki korelasi sebesar 86.00%. Menandakan semakin jauh jarak yang ditempuh, semakin mahal juga tarif taksi tersebut

---

### Bagaimana kondisi lalu lintas dan cuaca mempengaruhi harga perjalanan?
Semuah kondisi lalu lintas dan cuaca memiliki korelasi yang rendah terhadap harga perjalanan, semua fitur hanya memiliki korelasi < 7%. Sehingga kondisi lalu lintas dan cuaca bisa dikatakan tidak berdampak terhadap harga perjalanan

---

### Apakah ada pola tertentu dalam tarif berdasarkan waktu pengambilan dan pengantaran penumpang?
Tidak ada pola tertentu dalam waktu pengambilan dan pengantaran penumpang pada hari-hari tertentu, dikarenakan korelasinya semuanya rendah yaitu <= 7%.

---

Tetapi faktor seperti **jarak tempuh, Rate per KM, dan durasi waktu perjalanan yang mempengaruhi signifikan harga tarif taksi tersebut.**

# Data Preprocessing
"""

encoded_df.info()

"""## Split Data Fitur & Target"""

# Pisahkan fitur dan target
X = encoded_df.drop(columns=['Trip_Price'])
y = encoded_df['Trip_Price']

"""## Scaling Data"""

# Identifikasi kolom numerik
numerical_columns = X.select_dtypes(include=['float64']).columns

# Scaling data numerik
scaler = StandardScaler()
X[numerical_columns] = scaler.fit_transform(X[numerical_columns])

"""## Split Data Latih & Uji"""

# Bagi data menjadi training dan testing set (80/20)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Modelling

## Latih Data dengan Bermacam Model
"""

# Daftar model yang akan dicoba
models = {
    "Linear Regression": LinearRegression(),
    "Ridge Regression": Ridge(alpha=1.0),
    "Lasso Regression": Lasso(alpha=1.0),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Random Forest": RandomForestRegressor(random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(random_state=42),
    "Support Vector Regressor": SVR()
}

# Fungsi untuk melatih dan mengevaluasi model
def train_and_evaluate(models, X_train, X_test, y_train, y_test):
    results = {}
    for name, model in models.items():
        # Latih model
        model.fit(X_train, y_train)

        # Prediksi
        y_pred = model.predict(X_test)

        # Evaluasi
        mae = mean_absolute_error(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        # Simpan hasil
        results[name] = {
            "MAE": mae,
            "MSE": mse,
            "RÂ²": r2
        }

        # Tampilkan hasil
        print(f"Model: {name}")
        print(f"  MAE: {mae:.4f}")
        print(f"  MSE: {mse:.4f}")
        print(f"  RÂ²: {r2:.4f}")
        print("-" * 30)

    return results

# Latih dan evaluasi semua model
results = train_and_evaluate(models, X_train, X_test, y_train, y_test)

"""Model Gradient Boosting memiliki hasil yang sangat baik yaitu:
- MAE: 3.8068
- MSE: 49.5344
- RÂ²: 0.9803

# Evaluation

## Hasil Prediksi
"""

# Prediksi menggunakan model Gradient Boosting
y_pred = models["Gradient Boosting"].predict(X_test)

# Scatter plot untuk membandingkan nilai aktual dan prediksi
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--', lw=2)  # Garis y = x
plt.title('Gradient Boosting: Nilai Aktual vs Prediksi')
plt.xlabel('Nilai Aktual (y_test)')
plt.ylabel('Nilai Prediksi (y_pred)')
plt.grid(True)
plt.show()

"""Dapat dilihat bahwa, garis yang dibuat model sangat cocok dengan pola penyebaran data yang terdapat pada dataset, sehingga menunjukan peforma model yang sangat baik dalam memprediksi harga tarif taksi

## Menyimpan Model
"""

# Simpan model Gradient Boosting ke variabel 'model'
model = models["Gradient Boosting"]

# Cetak informasi model
print("Model yang disimpan:")
print(model)

# Simpan model ke file (opsional)
joblib.dump(model, 'gradient_boosting_model.pkl')
print("\nModel disimpan ke file 'gradient_boosting_model.pkl'")

"""## Testing Model"""

def predict_trip_price(model, scaler):
    # Inputan dari pengguna
    print("Masukkan detail perjalanan:")
    trip_distance = float(input("Trip Distance (km): "))
    passenger_count = float(input("Passenger Count: "))
    base_fare = float(input("Base Fare: "))
    per_km_rate = float(input("Per Km Rate: "))
    per_minute_rate = float(input("Per Minute Rate: "))
    trip_duration = float(input("Trip Duration (minutes): "))
    time_of_day_evening = int(input("Time of Day - Evening (0 atau 1): "))
    time_of_day_morning = int(input("Time of Day - Morning (0 atau 1): "))
    time_of_day_night = int(input("Time of Day - Night (0 atau 1): "))
    day_of_week_weekend = int(input("Day of Week - Weekend (0 atau 1): "))
    traffic_conditions_low = int(input("Traffic Conditions - Low (0 atau 1): "))
    traffic_conditions_medium = int(input("Traffic Conditions - Medium (0 atau 1): "))
    weather_rain = int(input("Weather - Rain (0 atau 1): "))
    weather_snow = int(input("Weather - Snow (0 atau 1): "))

    # Buat DataFrame dari inputan
    input_data = pd.DataFrame({
        'Trip_Distance_km': [trip_distance],
        'Passenger_Count': [passenger_count],
        'Base_Fare': [base_fare],
        'Per_Km_Rate': [per_km_rate],
        'Per_Minute_Rate': [per_minute_rate],
        'Trip_Duration_Minutes': [trip_duration],
        'Time_of_Day_Evening': [time_of_day_evening],
        'Time_of_Day_Morning': [time_of_day_morning],
        'Time_of_Day_Night': [time_of_day_night],
        'Day_of_Week_Weekend': [day_of_week_weekend],
        'Traffic_Conditions_Low': [traffic_conditions_low],
        'Traffic_Conditions_Medium': [traffic_conditions_medium],
        'Weather_Rain': [weather_rain],
        'Weather_Snow': [weather_snow]
    })

    # Scaling data numerik (jika diperlukan)
    numerical_columns = ['Trip_Distance_km', 'Passenger_Count', 'Base_Fare', 'Per_Km_Rate', 'Per_Minute_Rate', 'Trip_Duration_Minutes']
    input_data[numerical_columns] = scaler.transform(input_data[numerical_columns])

    # Prediksi harga
    predicted_price = model.predict(input_data)
    print(f"\nPredicted Trip Price: {predicted_price[0]:.2f}")

encoded_df.head()

# Panggil fungsi untuk memprediksi
predict_trip_price(model, scaler)

"""Model berhasil memprediksi harga berdasarkan inputan user

# Kriterial Keberhasilan

## Hasil Model Machine Learning
1. **Akurasi Model**: Model dapat memprediksi tarif perjalanan dengan error yang minimal.
2. **Dampak Bisnis**: Model dapat membantu meningkatkan transparansi dan efisiensi dalam sistem penentuan tarif taksi.
3. **Implementasi Model**: Model dapat diintegrasikan ke dalam aplikasi atau sistem berbasis web untuk memberikan estimasi tarif secara real-time kepada pengguna.

Dengan model ini, diharapkan bahwa industri transportasi berbasis taksi dapat meningkatkan efisiensi operasionalnya dan memberikan pengalaman pelanggan yang lebih baik.
"""

